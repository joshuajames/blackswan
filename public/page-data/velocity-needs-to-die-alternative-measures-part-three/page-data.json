{"componentChunkName":"component---src-templates-blog-post-js","path":"/velocity-needs-to-die-alternative-measures-part-three/","result":{"data":{"post":{"id":"cG9zdDo1Nzk2","excerpt":"<p>Part One looked at Velocity, what it is, how it gets abused and what the typical result of that is – and therefore the need for an alternative. Part Two &#8230; </p>\n<div><a href=\"/velocity-needs-to-die-alternative-measures-part-three/\" class=\"more-link\">Read More</a></div>\n","content":"<p><a href=\"http://blackswanfarming.com/velocity-needs-to-die-alternative-measures/\">Part One</a> looked at Velocity, what it is, how it gets abused and what the typical result of that is – and therefore the need for an alternative.</p>\n<p><a href=\"http://blackswanfarming.com/velocity-needs-to-die-alternative-measures-part-two/\">Part Two</a> then considered what &#8220;agility&#8221; means, with three overlapping principles that we want to try and find some measures for.</p>\n<p>Now we want to look at each of those three principles, and consider potentially useful measures we might try.</p>\n<h3><strong>VEO: Value Early and Often</strong></h3>\n<p>At it&#8217;s most simple, I think this could be a combination of the &#8220;V<em>alue Early</em>&#8221; part, which would be the elapsed time from when a team decides to focus on a problem area, to when they have developed a good enough MVP to test. Does it take 9 months to do an MVP? Or is it closer to 3 months? Let&#8217;s call this Time to Market, or TTM.</p>\n<p style=\"padding-left: 30px;\"><strong>TTM</strong> = <strong>Time to Market</strong> — Elapsed time in weeks from team starting to explore a problem space to when the first MVP is being <em>used</em> by Customers/Users.<br />\nIf MVP takes 9 months, the TTM = 39<br />\nIf MVP takes 3 months, the TTM = 13</p>\n<p>We also need something to cover the &#8220;<em>and Often</em>&#8221; part. I&#8217;d suggest something like Release Frequency as a half decent measure of this. So, what is the elapsed time between releases? Is it quarterly? or Monthly? Weekly? Daily? Multiple times a day? Clearly the shorter the better, as a general rule.</p>\n<p style=\"padding-left: 30px;\"><strong>RF</strong> = <strong>Release Frequency</strong> — Elapsed time in weeks between releases to customers/users. If Quarterly Releases, then RF = 13<br />\nIf Monthly Releases, the RF = 4.3<br />\nIf Daily (weekday) Releases, then RF = 0.2</p>\n<p>I&#8217;m not sure how to combine these two parameters, but adding them together doesn&#8217;t seem logical. I&#8217;m gonna multiply them for now. So&#8230;</p>\n<p style=\"padding-left: 30px;\"><strong>Value Early and Often, VEO = TTM x RF</strong></p>\n<p>So, let&#8217;s imagine how the conversation between a Senior Exec and, say, a Delivery Manager might go with this:</p>\n<blockquote><p>Exec: &#8220;So, what&#8217;s our <em>Value Early and Often</em> Score?&#8221;</p>\n<p>Delivery Manager: &#8220;Well, we&#8217;ve seen an improvement over the last quarter. Our TTM has gone from 39 weeks down to 26 weeks. This is mostly from doubling our Release Frequency which was Quarterly previously. We are now down from 13 weeks to a release to production every 6 weeks. There&#8217;s been a huge effort in making releases cheaper and Continuous Delivery to make this possible.&#8221;</p>\n<p><em>Exec</em>: &#8220;Sounds good – what&#8217;s the overall Score now?&#8221;</p>\n<p><em>DM</em>: &#8220;From 507 down to 156. A 70% improvement!&#8221;</p>\n<p><em>Exec</em>: &#8220;That&#8217;s amazing. We should celebrate that achievement. Do you need anything from me to get it down even further?&#8221;</p>\n<p><em>DM</em>: &#8220;Not really. But we have already plucked a lot of the low hanging fruit. To get it down further we really need to invest in improving the quality and coverage of our Unit Testing. For that, the teams have suggested that we increase capacity allocated to this to 20%. We&#8217;re shooting for TTM of 13 weeks and RF of 4 weeks, which would bring us down to 52.&#8221;</p>\n<p><em>Exec</em>: &#8220;If that&#8217;s what they suggest, we should look at what impact that might have on various roadmaps. I&#8217;m happy to signal to the Product Management community that this is important – but the decision is really up to the individual teams&#8221;</p></blockquote>\n<p>With me so far? Let&#8217;s look at the 2nd of the three principles and see where we end up&#8230;</p>\n<h3><strong>E2EF: End to End Flow</strong></h3>\n<p>This may seem like a repeat of TTM, but I&#8217;m assuming that the MVP is a bigger batch. What I&#8217;m interested is how long it takes for an <em>individual</em> Feature (of &#8220;story&#8221; if those represent something of value to the user/customer). We&#8217;re looking now not at the batch, but how quickly one item in the batch goes from backlog to done.</p>\n<p>For this, we can use the fairly standard definition of Cycletime, but ideally we would make this from End-to-End. The other thing to avoid here is measuring how long each part takes. If teams are building car doors, but not integrating those doors with the rest of the pieces needed to deliver and increment or iteration or information that is valuable it&#8217;s not really &#8220;end to end&#8221; in my view.</p>\n<p>For many orgs, you can get a fairly decent dataset on this by looking at Jira Control Charts. Or, just timestamp when an item is pulled from the backlog to when it&#8217;s &#8220;done&#8221;. It&#8217;s quite important that this also include the time spent in the last mile of development, from &#8220;code complete&#8221; to when it&#8217;s fully integrated and considered good enough to ship.</p>\n<p style=\"padding-left: 30px;\">CT = End to End Cycletime. Elapsed Time in days from pulling a “Ready for Dev” story or feature into WIP through to “Done Done” i.e. to production-level, ready to ship Quality.<br />\nIf Scrum with 2 week sprints, should be less than 14 days.</p>\n<p>We could make this more complicated by looking at Mean Time to Recovery and a load of other useful metrics, but for now let&#8217;s just keep it simple.</p>\n<p style=\"padding-left: 30px;\"><strong>End-to-End Flow, E2EF = CT</strong></p>\n<p>Again, let&#8217;s imagine how the conversation between a Senior Exec and, say, a Delivery Manager might go with this:</p>\n<blockquote><p>Exec: &#8220;So, what&#8217;s our <em>End-to-End Flow</em> Score?&#8221;</p>\n<p>Delivery Manager: &#8220;Well, to make the more frequent releases possible we&#8217;ve had to improve our Continuous Integration setup, shaving off half of the &#8220;last mile&#8221; to get to a production-like environment. We also added two UX designers where we had queues building up. From this and other improvements that have come out of team-level retrospectives, our E2E story cycletime has gone from a little over 4 weeks down to under 3 weeks for 70% of stories.&#8221;</p>\n<p><em>Exec</em>: &#8220;Sounds good – so a drop from 28 down to 21 days?&#8221;</p>\n<p><em>DM</em>: &#8220;Yeah – there&#8217;s of course some variation in that, but thats the trend for ~70% of stories&#8221;</p>\n<p><em>Exec</em>: &#8220;Understood. A 25% improvement is pretty good. What&#8217;s next on this?&#8221;</p>\n<p><em>DM</em>: &#8220;The teams think they can maybe get this down to under a fortnight. The bottleneck for most teams has shifted from downstream to upstream – so we&#8217;re starting to look at our Definitions of Ready to see if we can tighten that up to smooth the flow through the teams but without shifting more work upstream.&#8221;</p>\n<p><em>Exec</em>: &#8220;Perfect. Again, let me know if there&#8217;s anything I can do to support that.&#8221;</p></blockquote>\n<p>So now we have covered two of the three principles in some way shape or form. I&#8217;d argue this last one is perhaps the most important though, so stay with me&#8230;</p>\n<h3><strong>FFL: Fast Feedback Loops</strong></h3>\n<p>This one is more tricky. We&#8217;re in the realms of SNR: Signal to Noise Ratios, False Positives and False Negatives. Test Pyramids and Broken Windows Theory. Some feedback loops contain almost no <em>information</em> whatsoever.</p>\n<p>Good quality feedback loops are also nested, so if a quality problem makes it through an earlier feedback loop without being picked up, hopefully one of the many broader outside loops will catch it before a user or customer is affected.</p>\n<p>With all those caveats, how might we objectively <em>measure</em> fast feedback loops? We also want it to be relatively simple – we&#8217;re competing with &#8220;velocity&#8221; on the simplicity scale after all. So, what&#8217;s a half-decent starting point?</p>\n<p>How about if we chose three fairly common feedback loops and used the cycletime for each of those – measured from when we first start working on something to when we get some sort of feedback loop relating to quality that would tell us whether we are likely heading in the right direction?</p>\n<p>We of course already have a couple of key feedback loops covered in the above measures (TTM is the speed to feedback from users/customers, and CT is the speed of feedback for an individual feature or story). What nested feedback loops nested inside those two might be something we could objectively measure?</p>\n<p>Here&#8217;s a &#8220;starter for ten&#8221; set of three that might be worth trying?</p>\n<p style=\"padding-left: 30px;\">FL^3 = the cycletime of three nested feedback loops: From Pull of Story -&gt;<br />\na) UT: local Unit Tests to run (&lt;1 day?)<br />\nb) SIT: System Integration Tests (&lt; 5 days?) and<br />\nc) DSR: Demo/System Review (&lt; 14 days?)</p>\n<p>Again, I&#8217;m not sure how we might combine these three, but let&#8217;s say we multiply them together? Measured in Days? (Really not sure about this!) I&#8217;m also going to leave out, for simplicity&#8217;s sake, any measure of how often the team reflect on their own ways of working (AKA Retrospectives) as a core feedback loop for continuous improvement for the team itself rather than the Product they are working on. If we were to include it, it might be a fourth loop? Seems too easy to game that one though&#8230;</p>\n<p><strong>Fast Feedback Loops, FFL = UT x SIT x DSR</strong></p>\n<p>So how might the conversation go on this topic?</p>\n<blockquote><p>Exec: &#8220;So, the Value Early and Often and E2E Flow Scores are showing improvement. What about our <i>Fast Feedback Loops</i> Score?&#8221;</p>\n<p>Delivery Manager: &#8220;Glad you asked. I&#8217;ve already mentioned the investments we&#8217;ve made in speeding up Continuous Integration. The feedback loop from <em>Start</em> to <em>SIT Completed</em> is down from 4 weeks to less than 2 weeks on average. Unit Test are now running 50% faster too, so that&#8217;s down from nightly to half a day from when we start a story. It&#8217;s not reflected in the Score, but we&#8217;ve put a huge effort into refactoring broken tests and improving the SNR for the tests that we do have. We can now go from a broken build to a fix much faster, since we have better logging of bugs when they arise. Time to Demo hasn&#8217;t changed – we&#8217;re still doing these once a fortnight.&#8221;</p>\n<p><em>Exec</em>: &#8220;OK – so what the Fast Feedback Loops score?&#8221;</p>\n<p><em>DM</em>: &#8220;From 392 (=28 x 1 x 14) down to 98 (=14 x 0.5 x 14)&#8221;</p>\n<p><em>Exec</em>: &#8220;That&#8217;s great. This is so important – what&#8217;s the next steps on Fast Feedback Loops?&#8221;</p>\n<p><em>DM</em>: &#8220;Some of the teams feel they are ready to experiment with weekly Demos. We&#8217;re trying to convince some stakeholders of the importance of early feedback, but there&#8217;s some grumbling about this taking too much time.&#8221;</p>\n<p><em>Exec</em>: &#8220;OK. I&#8217;ll have a chat at my next weekly with my peers and explain the importance of fast feedback. With the improvements in Release Frequency and Time To Market, I&#8217;m sure we&#8217;ve earned the right to ask for them to cooperate – at least until they see the benefits for themselves.&#8221;</p></blockquote>\n<p>I could probably write a whole book on the importance of Fast Feedback loops with high quality Signal to Noise Ratio, and different ways to measure quality in these terms. Until I do, go and check out <a href=\"https://leanpub.com/measuringcontinuousdelivery\">Steve Smiths book &#8220;Measuring Continuous Delivery</a>&#8220;.</p>\n<h3>Combining all three: VEO, E2EF, FFL</h3>\n<p>Ideally, we <em>wouldn&#8217;t</em> combine these. I&#8217;d say each measure is worthy of attention separately, and combining them not only combines Apples and Oranges (not to mention potentially very different units) together in strange ways, but it dilutes and oversimplifies. If I was forced to combine, again, I&#8217;d probably multiply. If you wanted a higher number to represent &#8220;more agility&#8221; then you&#8217;d just take the inverse, something like this&#8230;</p>\n<p style=\"padding-left: 30px;\"><strong>&#8220;Value, Flow, Feedback&#8221; Score = 1,000,000 / [VEO x E2EF x FFL]</strong></p>\n<p>Using the examples above (which may seem low to some of you – but you have to meet people where they are!) the overall score would look something like this:</p>\n<p style=\"padding-left: 30px;\"><strong>VFF</strong>(Before) = 1,000,000 / [507 x 28 x 392] = 1/ 5,564,832 = 0.18 (Yeah, pretty low, right?)</p>\n<p style=\"padding-left: 30px;\"><strong>VFF</strong>(After) = 1,000,000 / [156 x 21 x 98] = 1/ 321,048 = 3.1 (Better!)</p>\n<p style=\"padding-left: 30px;\"><strong>VFF</strong>(Goal?) = 1,000,000 / [52 x 14 x 49] = 1/ 35,672 = 28 (Much Better!)</p>\n<p>How could teams use this? Well, for starters, baseline where you are today. For each, what improvements could you make? This way you could have an objective, consistent measure – and a way to communicate where you have come from, where you are today and what your goal is. I&#8217;d argue this would be better than the dozens of different <em>qualitative</em> Agile Assessments I&#8217;ve seen – which are typically based on some judgement about whether a team has adopted a particular set of agile practices, whether those are working or not.</p>\n<h3>Pitfalls?</h3>\n<p>I could probably write another whole blog post on how each of these could and are likely to be misused and abused. Not least of which is the likely application of <strong>targets</strong> to each of them. To which the economist Charles Goodhart would say, &#8220;<a href=\"https://en.wikipedia.org/wiki/Goodhart%27s_law\">When a measure becomes a target, it ceases to be a good measure.</a>&#8221;</p>\n<p>Would &#8220;VFF Score&#8221; be worse than &#8220;Velocity&#8221; though? Probably not.</p>\n<p>Thoughts? @ me! <a href=\"https://twitter.com/joshuajames\">Joshua J. Arnold</a>.</p>\n","title":"Part Three – Alternative measures? (Velocity needs to die)","date":"July 24, 2018","featuredImage":{"node":{"altText":"Value, Flow, Feedback","localFile":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='293'%20viewBox='0%200%20400%20293'%20preserveAspectRatio='none'%3e%3cpath%20d='M191%2041c-34%204-42%2022-13%2031%209%203%2035%204%2046%202%2015-4%2025-10%2024-18-1-3-1-3%204-4%2014-3%2018-3%2019-2l4-1c4-3%205-4%202-4l-5-1c-2%200-3%200-2%201%203%201%200%202-12%204s-12%202-15%201c-11-8-33-11-52-9m-6%205c-18%203-26%2011-18%2017%2019%2014%2077%2010%2077-6%200-3-1-3-9-2-7%202-9%202-8%200l7-1c7-2%207-2%201-5-13-5-35-7-50-3m7%2045l-38%2066-30%2052h-11c-19%200-35%206-39%2013-9%2016%2033%2027%2066%2019%2021-6%2026-16%2011-26-2-2%201-2%2047-2%2038%200%2048%200%2047%201-17%2010-12%2021%2011%2027%2011%203%2034%203%2045%200%2028-7%2028-22%202-30l-7-2%2010-8%2011-8c0%202%201%201%203-3l2-4-2%201c-6%201-8%203-7%203%202%200%200%203-8%2010l-11%209h-16l-3-4a7052%207052%200%2001-74-127l-9%2013M99%20214c-36%206-27%2024%2013%2026%2020%201%2037-3%2043-10%203-4%203-5-1-8-5-5-15-8-25-8l-7-1c0-1-15-1-23%201m181-1h-7c-13%200-26%203-32%209-4%204-4%206%202%2010%203%202%204%202%204%201l2-2%201%201%201%201c2%200%201-2-1-4l-3-5c0-4%206-5%207-1%201%201-1%203-2%201l-2-1%202%204c3%203%204%206%201%208-2%201-1%202%207%204%2014%202%2031%201%2044-2%204-1%204-1%203-4-2-4%200-8%203-8%203%201%204%205%201%205l-2%202%201%201%201-1h2c3%200%206-3%206-6%200-2-5-7-10-9-7-3-27-6-29-4M3%20287v4h8l8-1h1l1%201%201-3c0-3-1-4-4-4s-4%201-4%202c0%202%200%202-1%200l-2-2-1%202c0%204-2%204-2%201%200-2%200-2-2-3-3%200-3%200-3%203'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.366120218579235,"src":"/static/db79bd06f3a42ed7df0bc049f035fff1/5d2c5/Value-Flow-Feedback.png","srcSet":"/static/db79bd06f3a42ed7df0bc049f035fff1/002c1/Value-Flow-Feedback.png 250w,\n/static/db79bd06f3a42ed7df0bc049f035fff1/53f65/Value-Flow-Feedback.png 500w,\n/static/db79bd06f3a42ed7df0bc049f035fff1/5d2c5/Value-Flow-Feedback.png 1000w,\n/static/db79bd06f3a42ed7df0bc049f035fff1/8d364/Value-Flow-Feedback.png 1500w,\n/static/db79bd06f3a42ed7df0bc049f035fff1/5f4e3/Value-Flow-Feedback.png 1620w","sizes":"(max-width: 1000px) 100vw, 1000px"}}}}}},"previous":{"uri":"/cost-of-delay-and-cd3-prioritisation-at-scale/","title":"Cost of Delay and CD3 Prioritisation at Scale"},"next":{"uri":"/velocity-needs-to-die-alternative-measures-part-two/","title":"Part Two – “Velocity” needs to die. Alternative measures?"}},"pageContext":{"id":"cG9zdDo1Nzk2","previousPostId":"cG9zdDo1ODEx","nextPostId":"cG9zdDo1Nzkz"}},"staticQueryHashes":["1682016598","848497233"]}