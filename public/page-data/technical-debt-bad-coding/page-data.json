{"componentChunkName":"component---src-templates-blog-post-js","path":"/technical-debt-bad-coding/","result":{"data":{"post":{"id":"cG9zdDo1OTU3","excerpt":"<p>&#8220;Technical Debt&#8221; is NOT the result of poor programming&nbsp;– it is the cost of&nbsp;not refactoring&nbsp;as you learn more about a solution. Like all things popular, &#8220;Technical Debt&#8221; has become a &#8230; </p>\n<div><a href=\"/technical-debt-bad-coding/\" class=\"more-link\">Read More</a></div>\n","content":"\n<p><strong>&#8220;Technical Debt&#8221; is NOT the result of poor programming</strong>&nbsp;– it is the cost of&nbsp;<strong>not refactoring</strong>&nbsp;as you learn more about a solution.</p>\n\n\n\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\n<div class=\"x-embed x-is-rich x-is-twitter\"><blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">&quot;Technical Debt&quot; is NOT the result of poor programming – it is the cost of not refactoring as you learn more about a solution.</p>&mdash; Joshua J. Arnold (@joshuajames) <a href=\"https://twitter.com/joshuajames/status/491974664164737024?ref_src=twsrc%5Etfw\">July 23, 2014</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div>\n</div></figure>\n\n\n\n<p>Like all things popular, &#8220;Technical Debt&#8221; has become a widely misunderstood and abused term. In some cases, Tech Debt is everything done by those who have gone before, &#8220;OPC&#8221;: Other People&#8217;s Code. </p>\n\n\n\n<p>Other times, it&#8217;s it&#8217;s assumed that Technical Debt is the result of some dumb decision, or some corner that was cut. It&#8217;s important to understand the metaphor, and be careful how you use it.</p>\n\n\n\n<p>A bug or defect is <em>not</em> Technical Debt. Cutting corners on things like test coverage is <em>not</em> technical debt. Here&#8217;s Ward Cunningham (who coined the term Technical Debt),&nbsp;explaining where it came from and what he meant by it:</p>\n\n\n\n<figure class=\"wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-4-3 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<span class=\"embed-youtube\" style=\"text-align:center; display: block;\"><iframe class='youtube-player' width='1050' height='591' src='https://www.youtube.com/embed/pqeJFYwnkjE?version=3&#038;rel=1&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;fs=1&#038;hl=en-GB&#038;autohide=2&#038;wmode=transparent' allowfullscreen='true' style='border:0;' sandbox='allow-scripts allow-same-origin allow-popups allow-presentation'></iframe></span>\n</div></figure>\n\n\n\n<p>As you&#8217;ll see, the point is that&nbsp;<strong>as you learn&nbsp;</strong>about how the technology needs to work, that you need to go and<strong>&nbsp;iterate</strong>&nbsp;on the design. This is why we put &#8220;<em>Build, Measure, Learn</em>&#8221; and phrases like &#8220;<em>Lightbulb to Learning Loops</em>&#8221; at the centre of how we work.</p>\n\n\n\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\n<div class=\"x-embed x-is-rich x-is-twitter\"><blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">A priori = “good” implementation<br>Post hoc =&gt; “poor” implementation<br>Quid accidit? Learning.</p>&mdash; Joshua J. Arnold (@joshuajames) <a href=\"https://twitter.com/joshuajames/status/923258984017965056?ref_src=twsrc%5Etfw\">October 25, 2017</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div>\n</div></figure>\n\n\n\n<p>Technical Debt is the result of&nbsp;failing to <em>iterate</em> as you learn. There simply isn&#8217;t a version of doing good product development where you do&nbsp;<em>all</em>&nbsp;the learning during a &#8220;design and&nbsp;analysis&#8221; phase and then just &#8220;execute&#8221; or &#8220;deliver&#8221; that design. Double Diamond be damned!</p>\n\n\n\n<p></p>\n","title":"Technical Debt != Bad Coding","date":"March 15, 2020","featuredImage":{"node":{"altText":"","localFile":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='267'%20viewBox='0%200%20400%20267'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20134v133h401V0H0v134M186%2029v7l5%201c6%200%207%200%207-6%200-4-1-6-5-6l-3-1c-2-3-4-1-4%205M86%2057l-13%203-4%201-6%204c-16%2010-16%2024%201%2032a109%20109%200%200093-10c1%204%200%209-3%209h-3c-1%200-5%209-3%209%203%200%2011-8%2011-11v-1l1-17c1-6-3-10-10-14-13-8-46-10-64-5m112%202c-5%201-18%207-21%209-4%204-4%2010%201%2018%203%203%205%205%2011%208a76%2076%200%200015%206l5%202-11-1c-12%200-16-2-15-5%200-2-2-4-3-2%200%201-3%202-9%202l-10%201-1%201-2%202c-2%203-15%2013-16%2012l-2%201-8%203c-5%201-6%202-7%204l-2%202v-3c1-1%201-1-1-1-2%201-5%200-9-2s-9-4-17-5c-11-2-32-3-32-2l-8%203c-11%203-26%2010-31%2014-11%2010-15%2026-8%2034l3%206c0%202%201%204%203%205%205%203%206%204%204%201-2-2-2-2%200-2l5%202%206%202c5%201%205%202%202%206-7%2010-9%2025-4%2035l3%208c0%204%203%208%203%204%200-2%200-2%204%201%2017%2016%2053%2018%2078%205%2013-7%2025-21%2026-33%201-18-11-33-33-41l-3-1%203-3c5-4%208-7%2010-12l2-4%201%201v1l1%203c1%205%209%2015%2015%2020%2016%2010%2033%2015%2056%2015%2023%201%2032-1%2045-8%209-5%2012-7%2014-12%201-4%201-5-2-5-3-1-16-14-16-17%200-1%200-2%201-1%202%200%201-2-1-5v-3c2%200%202%200%203%204%200%202%202%204%203%205l9%206c15%2010%2026%2013%2049%2013%2015%200%2017%200%2023-2%209-3%208-3%208%201-1%203-4%207-6%207l-3%201a419%20419%200%2000-25%206c-4%200-4%201%202%205%2021%2014%2062%2017%2086%206l4-2c1-2%201%201-2%209l1%202v2l-1%202v4c0%203%202%202%204-2%202-3%202-6%202-27v-24l-6-5a81%2081%200%2000-42-19c-10-1-11-1-15-5-5-5-17-11-29-14-6-2-10-2-24-2h-16l2-3c9-10%207-16-7-26-14-9-46-15-65-11m51%2044l-15%201c-9%200-12%201-6%202l10%205c6%203%207%203%208%201l10-8c4-2%203-2-7-1m1%2077l-3%201-3%201-4%202c-4%202-7%204-7%206l-5%201h-3c-2%202-6%203-4%201l-1-1c-2%200-1%203%201%204s2%201-2%201l-4%201-2-1h-3l-1-1c-1-1-1-1-3%201-1%202-4%203-3%201l-7%201c-2%201-5%201-6-1h-2l-2-2c-1-2-2-3-3-2l-1-1v-1h-1c0-1-3-1-7%201l-5%206c-6%2014-5%2019%208%2031l7%209c0%204%204%207%204%202%200-2%200-2%205%201%2013%207%2058%209%2067%203l4-2%2018-13%203-2%201-2c3-5%202-14-3-23-5-10-11-16-19-19-11-5-13-5-14-3'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.4970059880239521,"src":"/static/274c84b91d163971b56d75f51135affb/724c8/small-change.jpg","srcSet":"/static/274c84b91d163971b56d75f51135affb/84d81/small-change.jpg 250w,\n/static/274c84b91d163971b56d75f51135affb/f0719/small-change.jpg 500w,\n/static/274c84b91d163971b56d75f51135affb/724c8/small-change.jpg 1000w,\n/static/274c84b91d163971b56d75f51135affb/26852/small-change.jpg 1024w","sizes":"(max-width: 1000px) 100vw, 1000px"}}}}}},"previous":{"uri":"/culture-decays-technology/","title":"Culture, Technology and Decay"},"next":{"uri":"/how-is-cost-of-delay-in-safe-calculated/","title":"How is Cost of Delay in SAFe calculated?"}},"pageContext":{"id":"cG9zdDo1OTU3","previousPostId":"cG9zdDo1OTc4","nextPostId":"cG9zdDo1OTUx"}},"staticQueryHashes":["1682016598","848497233"]}